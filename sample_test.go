// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sample

import (
	"sync"
)

// Ensure, that SampleMock does implement Sample.
// If this is not the case, regenerate this file with moq.
var _ Sample = &SampleMock{}

// SampleMock is a mock implementation of Sample.
//
// 	func TestSomethingThatUsesSample(t *testing.T) {
//
// 		// make and configure a mocked Sample
// 		mockedSample := &SampleMock{
// 			MethodFunc: func(s string) int {
// 				panic("mock out the Method method")
// 			},
// 		}
//
// 		// use mockedSample in code that requires Sample
// 		// and then make assertions.
//
// 	}
type SampleMock struct {
	// MethodFunc mocks the Method method.
	MethodFunc func(s string) int

	// calls tracks calls to the methods.
	calls struct {
		// Method holds details about calls to the Method method.
		Method []struct {
			// S is the s argument value.
			S string
		}
	}
	lockMethod sync.RWMutex
}

// Method calls MethodFunc.
func (mock *SampleMock) Method(s string) int {
	if mock.MethodFunc == nil {
		panic("SampleMock.MethodFunc: method is nil but Sample.Method was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockMethod.Lock()
	mock.calls.Method = append(mock.calls.Method, callInfo)
	mock.lockMethod.Unlock()
	return mock.MethodFunc(s)
}

// MethodCalls gets all the calls that were made to Method.
// Check the length with:
//     len(mockedSample.MethodCalls())
func (mock *SampleMock) MethodCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockMethod.RLock()
	calls = mock.calls.Method
	mock.lockMethod.RUnlock()
	return calls
}
